const app = getApp();
const {user,chat} = require('../../api/index')

Page({
  data: {
    // ËÅäÂ§©ÂØπË±°‰ø°ÊÅØ
    targetUser: null,
    // ÂΩìÂâçÁî®Êà∑‰ø°ÊÅØ
    currentUser: null,
    // Ê∂àÊÅØÂàóË°®
    messages: [],
    // ËæìÂÖ•Ê°ÜÂÜÖÂÆπ
    inputContent: '',
    // ÊòØÂê¶ÂèØ‰ª•Êó†ÈôêÂà∂ÂèëÈÄÅÊ∂àÊÅØ
    canSendFreely: false,
    // Ê∂àÊÅØÁ±ªÂûãÈÄâÊã©ËèúÂçïÊòØÂê¶ÊòæÁ§∫
    showMediaMenu: false,
    // ÊòØÂê¶ÊòæÁ§∫Ë°®ÊÉÖÈÄâÊã©Âô®
    showEmojiPicker: false,
    // ÊòØÂê¶ÊòæÁ§∫ÈïøÊåâËèúÂçï
    showActionMenu: false,
    // ÂΩìÂâçÈïøÊåâÁöÑÊ∂àÊÅØ
    currentMessage: null,
    // ÈïøÊåâËèúÂçïÈÄâÈ°π
    actionMenuItems: [
      { text: 'Â§çÂà∂', value: 'copy' },
      { text: 'Âà†Èô§', value: 'delete' },
      { text: 'Êí§Âõû', value: 'recall' },
    ],
    // Ë°®ÊÉÖÂàóË°®
    emojiList: [
      'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ', 'ü§£', 'üòä', 'üòá',
      'üôÇ', 'üôÉ', 'üòâ', 'üòå', 'üòç', 'ü•∞', 'üòò', 'üòó', 'üòô', 'üòö',
      'üòã', 'üòõ', 'üòù', 'üòú', 'ü§™', 'ü§®', 'üßê', 'ü§ì', 'üòé', 'ü§©',
    ],
    // ÂÖ≥Ê≥®Áä∂ÊÄÅ
    followStatus: {
      iFollowThem: false,
      theyFollowMe: false
    }
  },

  onLoad: function (options) {
    // Ëé∑ÂèñÁõÆÊ†áÁî®Êà∑ID
    const targetUserId = options.userId;
    if (!targetUserId) {
      wx.showToast({
        title: 'Áî®Êà∑‰∏çÂ≠òÂú®',
        icon: 'error'
      });
      setTimeout(() => {
        wx.navigateBack();
      }, 1500);
      return;
    }
    
    // Ëé∑ÂèñÂΩìÂâçÁî®Êà∑‰ø°ÊÅØ
    this.setData({
      currentUser: app.globalData.userInfo
    });
    
    // Ëé∑ÂèñÁõÆÊ†áÁî®Êà∑‰ø°ÊÅØ
    this.getTargetUserInfo(targetUserId);
    
    // Ëé∑ÂèñËÅäÂ§©ÂéÜÂè≤
    this.getChatHistory(this.data.currentUser.id,targetUserId);
    
    // Ëé∑ÂèñÂÖ≥Ê≥®Áä∂ÊÄÅ
    this.getFollowStatus(targetUserId);
  },
  
  // Ëé∑ÂèñÁõÆÊ†áÁî®Êà∑‰ø°ÊÅØ
  getTargetUserInfo(userId) {
    //ÂèëÈÄÅËØ∑Ê±Ç
		user.getUserInfoApi({userId})
		.then((data)=>{
			wx.setNavigationBarTitle({
				title: data.nickName,
			});

			this.setData({
				targetUser: data
			})
		})
  },
  
  // Ëé∑ÂèñËÅäÂ§©ÂéÜÂè≤
  getChatHistory(userId,receiverId) {
		console.log("‰Ω†Êó†Êïå‰∫Ü")
		chat.getHistoryMessageApi({userId,receiverId})
		.then((data)=>{
			this.setData({
				messages: data
			})
		})
  },
  
  // Ëé∑ÂèñÂÖ≥Ê≥®Áä∂ÊÄÅ
  getFollowStatus(targetUserId) {
		user.getFollowStatusApi({userId:targetUserId})
		.then((data)=>{
			setData({
				'followStatus.iFollowThem': data.iFollowThem,
				'followStatus.theyFollowMe': data.theyFollowMe,
			})
		})
  },
  
  // ÂèëÈÄÅÊ∂àÊÅØ
  sendMessage() {
    if (!this.data.inputContent.trim()) return;
    
    // Â¶ÇÊûú‰∏çÊòØ‰∫íÂÖ≥Ôºå‰∏îÂ∑≤ÁªèÂèëÈÄÅËøá‰∏ÄÊù°Ê∂àÊÅØÔºåÂàôÊèêÁ§∫
    if (!this.data.canSendFreely) {
      const myMessages = this.data.messages.filter(msg => 
        msg.senderId === this.data.currentUser.id && 
        !msg.isSystemMessage
      );
      
      if (myMessages.length > 0 && !this.data.followStatus.theyFollowMe) {
        wx.showToast({
          title: 'ÂØπÊñπÊú™ÂÖ≥Ê≥®‰Ω†ÔºåÊó†Ê≥ïÂèëÈÄÅÊõ¥Â§öÊ∂àÊÅØ',
          icon: 'none'
        });
        return;
      }
    }
    
    const newMessage = {
      id: Date.now().toString(),
      senderId: this.data.currentUser.id,
      content: this.data.inputContent,
      type: 'text',
      timestamp: new Date().getTime(),
      status: 'sending'
    };
    
    const messages = [...this.data.messages, newMessage];
    
    this.setData({
      messages,
      inputContent: ''
    });
    
    // Ê®°ÊãüÂèëÈÄÅÊ∂àÊÅØ
    setTimeout(() => {
      const updatedMessages = this.data.messages.map(msg => {
        if (msg.id === newMessage.id) {
          return { ...msg, status: 'sent' };
        }
        return msg;
      });
      
      this.setData({
        messages: updatedMessages
      });
    }, 500);
  },
  
  // Â§ÑÁêÜËæìÂÖ•Ê°ÜÂÜÖÂÆπÂèòÂåñ
  onInputChange(e) {
    this.setData({
      inputContent: e.detail.value
    });
  },
  
  // ÊâìÂºÄÂ™í‰ΩìÈÄâÊã©ËèúÂçï
  openMediaMenu() {
    this.setData({
      showMediaMenu: true
    });
  },
  
  // ÂÖ≥Èó≠Â™í‰ΩìÈÄâÊã©ËèúÂçï
  closeMediaMenu() {
    this.setData({
      showMediaMenu: false
    });
  },
  
  // ÊâìÂºÄË°®ÊÉÖÈÄâÊã©Âô®
  toggleEmojiPicker() {
    this.setData({
      showEmojiPicker: !this.data.showEmojiPicker,
      showMediaMenu: false
    });
  },
  
  // ÈÄâÊã©Ë°®ÊÉÖ
  selectEmoji(e) {
    const emoji = e.currentTarget.dataset.emoji;
    this.setData({
      inputContent: this.data.inputContent + emoji
    });
  },
  
  // ÈÄâÊã©Âπ∂ÂèëÈÄÅÂõæÁâá
  chooseAndSendImage() {
    wx.chooseMedia({
      count: 1,
      mediaType: ['image'],
      sourceType: ['album', 'camera'],
      success: (res) => {
        const tempFilePath = res.tempFiles[0].tempFilePath;
        this.uploadAndSendMedia(tempFilePath, 'image');
      }
    });
    this.closeMediaMenu();
  },
  
  // ÈÄâÊã©Âπ∂ÂèëÈÄÅËßÜÈ¢ë
  chooseAndSendVideo() {
    wx.chooseMedia({
      count: 1,
      mediaType: ['video'],
      sourceType: ['album', 'camera'],
      success: (res) => {
        const tempFilePath = res.tempFiles[0].tempFilePath;
        this.uploadAndSendMedia(tempFilePath, 'video');
      }
    });
    this.closeMediaMenu();
  },
  
  // ÈÄâÊã©Âπ∂ÂèëÈÄÅÊñá‰ª∂
  chooseAndSendFile() {
    wx.showToast({
      title: 'Â∞èÁ®ãÂ∫èÊöÇ‰∏çÊîØÊåÅÈÄâÊã©Êñá‰ª∂',
      icon: 'none'
    });
    this.closeMediaMenu();
  },
  
  // ‰∏ä‰º†Âπ∂ÂèëÈÄÅÂ™í‰ΩìÊñá‰ª∂
  uploadAndSendMedia(filePath, type) {
    const newMessage = {
      id: Date.now().toString(),
      senderId: this.data.currentUser.id,
      content: filePath,
      type: type,
      timestamp: new Date().getTime(),
      status: 'sending'
    };
    
    const messages = [...this.data.messages, newMessage];
    
    this.setData({
      messages
    });
    
    // Ê®°Êãü‰∏ä‰º†ËøáÁ®ã
    wx.showLoading({
      title: 'ÂèëÈÄÅ‰∏≠...',
    });
    
    setTimeout(() => {
      wx.hideLoading();
      
      const updatedMessages = this.data.messages.map(msg => {
        if (msg.id === newMessage.id) {
          return { ...msg, status: 'sent' };
        }
        return msg;
      });
      
      this.setData({
        messages: updatedMessages
      });
    }, 1500);
  },
  
  // Â§ÑÁêÜÈïøÊåâÊ∂àÊÅØ
  handleLongPress(e) {
    const messageId = e.currentTarget.dataset.id;
    const message = this.data.messages.find(msg => msg.id === messageId);
    
    if (!message) return;
    
    // Âè™ÊúâËá™Â∑±ÂèëÈÄÅÁöÑÊ∂àÊÅØÊâçËÉΩÊâßË°åÊüê‰∫õÊìç‰Ωú
    let actionMenuItems = [...this.data.actionMenuItems];
    if (message.senderId !== this.data.currentUser.id) {
      actionMenuItems = actionMenuItems.filter(item => item.value === 'copy');
    }
    
    this.setData({
      currentMessage: message,
      showActionMenu: true,
      actionMenuItems
    });
  },
  
  // Â§ÑÁêÜÈïøÊåâËèúÂçïÈÄâÊã©
  handleActionSelected(e) {
    const action = e.detail.selected.value;
    const message = this.data.currentMessage;
    
    if (!message) return;
    
    switch (action) {
      case 'copy':
        if (message.type === 'text') {
          wx.setClipboardData({
            data: message.content,
            success: () => {
              wx.showToast({ title: 'Â∑≤Â§çÂà∂', icon: 'success' });
            }
          });
        }
        break;
      case 'delete':
        this.deleteMessage(message.id);
        break;
      case 'recall':
        this.recallMessage(message.id);
        break;
    }
    
    this.setData({
      showActionMenu: false,
      currentMessage: null
    });
  },
  
  // Âà†Èô§Ê∂àÊÅØ
  deleteMessage(messageId) {
    const updatedMessages = this.data.messages.filter(msg => msg.id !== messageId);
    this.setData({
      messages: updatedMessages
    });
    
    wx.showToast({
      title: 'Â∑≤Âà†Èô§',
      icon: 'success'
    });
  },
  
  // Êí§ÂõûÊ∂àÊÅØ
  recallMessage(messageId) {
    const now = new Date().getTime();
    const message = this.data.messages.find(msg => msg.id === messageId);
    
    // ‰ªÖÂÖÅËÆ∏2ÂàÜÈíüÂÜÖÊí§Âõû
    if (now - message.timestamp > 2 * 60 * 1000) {
      wx.showToast({
        title: 'Ë∂ÖËøá2ÂàÜÈíüÁöÑÊ∂àÊÅØÊó†Ê≥ïÊí§Âõû',
        icon: 'none'
      });
      return;
    }
    
    const updatedMessages = this.data.messages.map(msg => {
      if (msg.id === messageId) {
        return {
          ...msg,
          isRecalled: true,
          content: 'Ê≠§Ê∂àÊÅØÂ∑≤Êí§Âõû',
          originalContent: msg.content
        };
      }
      return msg;
    });
    
    this.setData({
      messages: updatedMessages
    });
    
    wx.showToast({
      title: 'Â∑≤Êí§Âõû',
      icon: 'success'
    });
  },
  
  // ÂÖ≥Ê≥®Áî®Êà∑
  followUser() {
    wx.showLoading({
      title: 'Â§ÑÁêÜ‰∏≠...',
    });
    
    // Ê®°ÊãüAPIË∞ÉÁî®
    setTimeout(() => {
      wx.hideLoading();
      
      const newStatus = {
        ...this.data.followStatus,
        iFollowThem: true
      };
      
      this.setData({
        followStatus: newStatus,
        canSendFreely: newStatus.iFollowThem && newStatus.theyFollowMe
      });
      
      wx.showToast({
        title: 'Â∑≤ÂÖ≥Ê≥®',
        icon: 'success'
      });
    }, 800);
  },
  
  // ÂèñÊ∂àÂÖ≥Ê≥®Áî®Êà∑
  unfollowUser() {
    wx.showLoading({
      title: 'Â§ÑÁêÜ‰∏≠...',
    });
    
    // Ê®°ÊãüAPIË∞ÉÁî®
    setTimeout(() => {
      wx.hideLoading();
      
      const newStatus = {
        ...this.data.followStatus,
        iFollowThem: false
      };
      
      this.setData({
        followStatus: newStatus,
        canSendFreely: newStatus.iFollowThem && newStatus.theyFollowMe
      });
      
      wx.showToast({
        title: 'Â∑≤ÂèñÊ∂àÂÖ≥Ê≥®',
        icon: 'success'
      });
    }, 800);
  }
}) 